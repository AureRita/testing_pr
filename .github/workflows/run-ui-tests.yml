name: Run UI tests with pre-built shop
on:
  workflow_call:
    inputs:
      base_branch:
        type: string
        description: Base branch to rebase the PR
        required: true
      ps_mode_dev:
        type: boolean
        description: Enable/Disable the developer mode
        required: true
      php_version:
        type: string
        description: PHP version
        required: true
      node_version:
        type: string
        description: Node version
        required: true
      test_command:
        type: string
        description: Test command to run
        required: true
      fast_fail:
        type: boolean
        description: Fast fail on first error
        required: true
        default: false

jobs:
  testing-pr:
    runs-on: ubuntu-latest
    name: Run UI Tests ${{ inputs.test_command }}
    env:
      # Input values
      PS_MODE_DEV: ${{ inputs.ps_mode_dev && '1' || '0' }}
      PS_DEV_MODE: ${{ inputs.ps_mode_dev && '1' || '0' }}
      PHP_VERSION: ${{ inputs.php_version }}
      NODE_VERSION: ${{ inputs.node_version }}
      VERSION: ${{ inputs.php_version }}-apache
      PS_DOMAIN: ${{ ((inputs.base_branch == '8.0.x') || (inputs.base_branch == '1.7.8.x')) && 'localhost:8001' || 'localhost:8002' }}
      PS_ENABLE_SSL: ${{ ((inputs.base_branch == '8.0.x') || (inputs.base_branch == '1.7.8.x')) && '0' || '1' }}
      ADMIN_PASSWD: ${{ (inputs.base_branch == '1.7.8.x') && 'prestashop_demo' || 'Correct Horse Battery Staple' }}
      # Fixed values
      DB_USER: root
      DB_PASSWD: prestashop
      DB_NAME: prestashop
      DB_PREFIX: tst_
      DB_SERVER: mysql
      PS_DIR: 'my_prestashop'
      PS_FOLDER_INSTALL: install-dev
      PS_FOLDER_ADMIN: admin-dev
      PS_COUNTRY: fr
      PS_LANGUAGE: en
      ADMIN_MAIL: 'demo@prestashop.com'

    steps:
      - name: Print Inputs values
        shell: bash
        run: echo "${{ toJSON(inputs) }}"

      # Checkout repository to use custom actions
      - uses: actions/checkout@v3
        with:
          path: custom_actions

      - name: Download docker artifacts
        uses: actions/download-artifact@v3
        with:
          name: shop-artifacts
          path: /tmp/shop-artifacts

      - name: Extract PrestaShop sources
        run: |
          unzip /tmp/shop-artifacts/sources.zip -d .

      # Certificate
      - name: Generate a certificate
        if: (inputs.base_branch == '8.1.x') || (inputs.base_branch == 'develop')
        run: |
          ## Install MkCert
          sudo apt install libnss3-tools
          curl -JLO "https://dl.filippo.io/mkcert/latest?for=linux/amd64"
          chmod +x mkcert-v*-linux-amd64
          sudo cp mkcert-v*-linux-amd64 /usr/local/bin/mkcert
          ## Generate certificate
          mkcert -key-file ./${{ env.PS_DIR }}/.docker/ssl.key -cert-file ./${{ env.PS_DIR }}/.docker/ssl.crt localhost
          ## Link certificate to Chrome Trust Store
          mkdir -p $HOME/.pki/nssdb
          certutil -d $HOME/.pki/nssdb -N
          certutil -d sql:$HOME/.pki/nssdb -n localhost -A -t "TCu,Cu,Tu" -i ./${{ env.PS_DIR }}/.docker/ssl.crt
          ## Add self-signed certificate to Chrome Trust Store
          mkcert -install

      - name: Setup database
        working-directory: ${{ env.PS_DIR }}
        timeout-minutes: 5
        run: |
          echo Starting mysql docker alone
          USER_ID=$(id -u) GROUP_ID=$(id -g) docker-compose -f docker-compose.yml up -d --build mysql
          echo Wait until mysql is accessible
          until docker exec my_prestashop_mysql_1 /usr/bin/mysql -u ${{ env.DB_USER }} -p${{ env.DB_PASSWD }}; do echo "Sleep and retry to check"; sleep 2; done
          echo Copying dump into docker
          docker cp /tmp/shop-artifacts/db_dump.sql my_prestashop_mysql_1:/tmp/db_dump.sql
          echo Creating ${{ env.DB_NAME }} database
          docker exec my_prestashop_mysql_1 /usr/bin/mysql -u ${{ env.DB_USER }} -p${{ env.DB_PASSWD }} -e "CREATE DATABASE IF NOT EXISTS ${{ env.DB_NAME }};"
          echo Load dump into DB
          docker exec my_prestashop_mysql_1 /usr/bin/mysql -u ${{ env.DB_USER }} -p${{ env.DB_PASSWD }} ${{ env.DB_NAME }} -e "source /tmp/db_dump.sql;"

      - name: Start up shop docker
        working-directory: ${{ env.PS_DIR }}
        timeout-minutes: 5
        env:
          VERSION: ${{ (inputs.base_branch == '1.7.8.x') && inputs.php_version || env.VERSION }}
          URL_FO: ${{ ((inputs.base_branch == '8.0.x') || (inputs.base_branch == '1.7.8.x')) && 'http://localhost:8001/' || 'https://localhost:8002/' }}
          # No install we force the sources and load the SQL dump
          PS_INSTALL_AUTO: 0
          DISABLE_MAKE: 1
        run: |
          echo Build the remaining dockers
          USER_ID=$(id -u) GROUP_ID=$(id -g) docker-compose -f docker-compose.yml up -d --build
          echo Waiting for response from the FO
          bash -c 'while [[ "$(curl -L -s -o /dev/null -w %{http_code} ${{ env.URL_FO }}en/)" != "200" ]]; do sleep 5; done'

      # Don't know why this is required to do this here, when node_modules are installed in the build step and given via the archive
      # they can't be run and an error occurs (to be investigated, it would be better if this is done once in the build)
      - uses: ./custom_actions/.github/workflows/actions/install-node-modules
        with:
          node_version: ${{ inputs.node_version }}
          package_locks: |
            ${{ env.PS_DIR }}/tests/UI/package-lock.json

      - name: Run tests
        id: runTests
        run: |
          export NODE_EXTRA_CA_CERTS="$(mkcert -CAROOT)/rootCA.pem"
          npm run test:${{ inputs.test_command }} ${{ env.BAIL_ARGUMENT }}
        working-directory: '${{ env.PS_DIR }}/tests/UI'
        env:
          URL_FO: ${{ ((inputs.base_branch == '8.0.x') || (inputs.base_branch == '1.7.8.x')) && 'http://localhost:8001/' || 'https://localhost:8002/' }}
          DB_NAME: prestashop
          DB_PASSWD: prestashop
          HEADLESS: true
          ENABLE_SSL: true
          TAKE_SCREENSHOT_AFTER_FAIL: true
          SMTP_SERVER: '172.17.0.1'
          EXTRA_TEST_PARAMS: ${{ inputs.fast_fail && '--bail' || '' }}

      # UI Tests : Upload screenshots
      - run: echo "SCREENSHOT_CAMPAIGN=$( echo -e '${{ inputs.test_command }}' | tr ':' '-' )" >> $GITHUB_ENV
        if: failure()

      - name: Export docker logs
        run: |
          mkdir -p ${{ env.PS_DIR }}/var/docker-logs
          docker logs my_prestashop_mysql_1 > ${{ env.PS_DIR }}/var/docker-logs/mysql.log
          docker logs my_prestashop_prestashop-git_1 > ${{ env.PS_DIR }}/var/docker-logs/prestashop.log
          docker logs my_prestashop_keycloak_1 > ${{ env.PS_DIR }}/var/docker-logs/keycloak.log
        if: failure()

      - name: Export logs and screenshots as artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: campaign-${{ env.SCREENSHOT_CAMPAIGN }}
          path: |
            ${{ env.PS_DIR }}/tests/UI/screenshots/
            ${{ env.PS_DIR }}/var/logs
            ${{ env.PS_DIR }}/var/docker-logs
